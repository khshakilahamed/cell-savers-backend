// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String

  createdAt DateTime @default(now()) @map("created_At")
  updatedAt DateTime @updatedAt

  customers      Customer[]
  customerAgents CustomerAgent[]

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Customer {
  id                 String  @id @default(uuid())
  firstName          String  @map("first_name")
  lastName           String  @map("last_name")
  email              String  @unique
  profilePicture     String? @map("profile_picture")
  gender             GENDER?
  contactNo          String  @unique @map("contact_no")
  emergencyContactNo String? @map("emergency_contact_no")
  presentAddress     String? @map("present_address")
  permanentAddress   String? @map("permanent_address")

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime   @default(now()) @map("created_At")
  updatedAt DateTime   @updatedAt
  bookings  Booking[]
  feedBacks FeedBack[]
  reviews   Review[]

  @@map("customers")
}

model CustomerAgent {
  id                 String  @id @default(uuid())
  firstName          String  @map("first_name")
  lastName           String  @map("last_name")
  email              String  @unique
  profilePicture     String? @map("profile_picture")
  gender             GENDER?
  contactNo          String  @unique @map("contact_no")
  emergencyContactNo String? @map("emergency_contact_no")
  presentAddress     String? @map("present_address")
  permanentAddress   String? @map("permanent_address")

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now()) @map("created_At")
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  reviews   Review[]
  blogs     Blog[]
  faqs      FAQ[]

  @@map("customer_agents")
}

model Role {
  id    String    @id @default(uuid())
  title USER_ROLE @unique

  createdAt DateTime @default(now()) @map("created_At")
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("roles")
}

model Blog {
  id          String  @id @default(uuid())
  title       String
  image       String?
  description String

  customerAgentId String        @map("customer_agent_id")
  customerAgent   CustomerAgent @relation(fields: [customerAgentId], references: [id])

  createdAt DateTime @default(now()) @map("created_At")
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model FAQ {
  id String @id @default(uuid())

  question String
  answer   String

  customerAgentId String        @map("customer_agent_id")
  customerAgent   CustomerAgent @relation(fields: [customerAgentId], references: [id])

  createdAt DateTime @default(now()) @map("created_At")
  updatedAt DateTime @updatedAt

  @@map("faq_s")
}

model FeedBack {
  id      String @id @default(uuid())
  comment String

  customerId String   @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now()) @map("created_At")
  updatedAt DateTime @updatedAt

  @@map("feed_backs")
}

model Service {
  id          String @id @default(uuid())
  title       String @unique
  price       Float
  image       String @default("null")
  description String

  createdAt DateTime  @default(now()) @map("created_At")
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  reviews   Review[]

  @@map("services")
}

model TimeSlot {
  id        String @id @default(uuid())
  startTime String @map("start_time")
  endTime   String @map("end_time")

  createdAt DateTime  @default(now()) @map("created_At")
  updatedAt DateTime  @updatedAt
  bookings  Booking[]

  @@map("time_slots")
}

model Booking {
  id               String         @id @default(uuid())
  bookingDate      String         @map("booking_date")
  issueDescription String         @map("issue_description")
  bookingStatus    BOOKING_STATUS @default(PENDING)
  issueStatus      ISSUE_STATUS   @default(PENDING)
  readyToReview    Boolean        @default(false) @map("ready_to_review")

  customerId String   @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id])

  customerAgentId String        @map("customer_agent_id")
  customerAgent   CustomerAgent @relation(fields: [customerAgentId], references: [id])

  serviceId String  @map("service_id")
  service   Service @relation(fields: [serviceId], references: [id])

  slotId String   @map("slot_id")
  slot   TimeSlot @relation(fields: [slotId], references: [id])

  createdAt DateTime @default(now()) @map("created_At")
  updatedAt DateTime @updatedAt

  reviews Review[]

  @@map("bookings")
}

model Review {
  id      String @id @default(uuid())
  rating  Float  @default(5)
  comment String

  customerId String   @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id])

  bookingId String  @map("booking_id")
  booking   Booking @relation(fields: [bookingId], references: [id])

  serviceId String  @map("service_id")
  service   Service @relation(fields: [serviceId], references: [id])

  customerAgentId String        @map("customer_agent_id")
  customerAgent   CustomerAgent @relation(fields: [customerAgentId], references: [id])

  createdAt DateTime @default(now()) @map("created_At")
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

enum USER_ROLE {
  CUSTOMER
  TECHNICIAN
  ADMIN
  SUPER_ADMIN
}

enum GENDER {
  Male
  Female
  Other
}

enum BOOKING_STATUS {
  PENDING
  CONFIRM
  CANCELLED
}

enum ISSUE_STATUS {
  PENDING
  ONGOING
  FIXED
  NOT_FIXED
  CANCELLED
}
